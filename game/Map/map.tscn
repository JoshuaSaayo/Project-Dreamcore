[gd_scene load_steps=20 format=3 uid="uid://cc8mj42rxscx7"]

[ext_resource type="PackedScene" uid="uid://dlrbtqsht36mp" path="res://Map/DreamPool.glb" id="1_ro55w"]
[ext_resource type="PackedScene" uid="uid://cn0oy2nyrcqgr" path="res://Map/DreamPoolFloor.glb" id="2_3g1qk"]
[ext_resource type="PackedScene" uid="uid://clping7g0xs1h" path="res://assets/smiley/Smiley.glb" id="2_njngi"]
[ext_resource type="PackedScene" uid="uid://cy1sd2t1xwfry" path="res://assets/duck_buoy/DuckBuoy.glb" id="3_6yc6o"]
[ext_resource type="PackedScene" uid="uid://hop4wc0ql5av" path="res://Map/Doors.glb" id="3_d1580"]
[ext_resource type="Script" uid="uid://2oj1x12f0bau" path="res://Map/smiley.gd" id="4_86j4t"]
[ext_resource type="PackedScene" uid="uid://bs72ogkvdd7d6" path="res://addons/proto_controller/proto_controller.tscn" id="5_8svjd"]

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_d1580"]
sky_horizon_color = Color(0.662243, 0.671743, 0.686743, 1)
ground_horizon_color = Color(0.662243, 0.671743, 0.686743, 1)

[sub_resource type="Sky" id="Sky_5ej7w"]
sky_material = SubResource("ProceduralSkyMaterial_d1580")

[sub_resource type="Environment" id="Environment_lymsy"]
background_mode = 2
background_color = Color(0.139997, 0.195845, 0.260278, 1)
sky = SubResource("Sky_5ej7w")
tonemap_mode = 2
glow_enabled = true
volumetric_fog_enabled = true
volumetric_fog_albedo = Color(0.0223201, 0.0660172, 0.0628479, 1)

[sub_resource type="Shader" id="Shader_6yc6o"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.4.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform ivec2 albedo_texture_size;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_refraction : filter_linear_mipmap, repeat_enable;
uniform float refraction : hint_range(-1.0, 1.0, 0.001);
uniform vec4 refraction_texture_channel;
uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_linear_mipmap;
uniform sampler2D depth_texture : hint_depth_texture, repeat_disable, filter_nearest;

uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0);
varying vec3 uv1_triplanar_pos;

uniform float uv1_blend_sharpness : hint_range(0.0, 150.0, 0.001);
varying vec3 uv1_power_normal;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	vec3 normal = MODEL_NORMAL_MATRIX * NORMAL;

	TANGENT = vec3(0.0, 0.0, -1.0) * abs(normal.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.z);
	TANGENT = inverse(MODEL_NORMAL_MATRIX) * normalize(TANGENT);

	BINORMAL = vec3(0.0, 1.0, 0.0) * abs(normal.x);
	BINORMAL += vec3(0.0, 0.0, -1.0) * abs(normal.y);
	BINORMAL += vec3(0.0, 1.0, 0.0) * abs(normal.z);
	BINORMAL = inverse(MODEL_NORMAL_MATRIX) * normalize(BINORMAL);

	// UV1 Triplanar: Enabled (with World Triplanar)
	uv1_power_normal = pow(abs(normal), vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz * uv1_scale + uv1_offset + TIME * 0.05;
	uv1_power_normal /= dot(uv1_power_normal, vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0, -1.0, 1.0);
}

vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
	vec4 samp = vec4(0.0);
	samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
	samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
	samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
	return samp;
}

void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo, uv1_power_normal, uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(triplanar_texture(texture_metallic, uv1_power_normal, uv1_triplanar_pos), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness, uv1_power_normal, uv1_triplanar_pos), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Normal Map: Enabled
	NORMAL_MAP = triplanar_texture(texture_normal, uv1_power_normal, uv1_triplanar_pos).rgb;
	NORMAL_MAP_DEPTH = normal_scale;

	// Refraction: Enabled (with normal map texture)
	vec3 unpacked_normal = NORMAL_MAP;
	unpacked_normal.xy = unpacked_normal.xy * 2.0 - 1.0;
	unpacked_normal.z = sqrt(max(0.0, 1.0 - dot(unpacked_normal.xy, unpacked_normal.xy)));
	vec3 ref_normal = normalize(mix(
			NORMAL,
			TANGENT * unpacked_normal.x + BINORMAL * unpacked_normal.y + NORMAL * unpacked_normal.z,
			NORMAL_MAP_DEPTH));
	vec2 ref_ofs = SCREEN_UV - ref_normal.xy * dot(triplanar_texture(texture_refraction, uv1_power_normal, uv1_triplanar_pos), refraction_texture_channel) * refraction;

	float ref_amount = 1.0 - albedo.a * albedo_tex.a;

	float refraction_depth_tex = textureLod(depth_texture, ref_ofs, 0.0).r;
	vec4 refraction_view_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV * 2.0 - 1.0, refraction_depth_tex, 1.0);
	refraction_view_pos.xyz /= refraction_view_pos.w;

	// If the depth buffer is lower then the model's Z position, use the refracted UV, otherwise use the normal screen UV.
	// At low depth differences, decrease refraction intensity to avoid sudden discontinuities.
	EMISSION += textureLod(screen_texture, mix(SCREEN_UV, ref_ofs, smoothstep(0.0, 1.0, VERTEX.z - refraction_view_pos.z)), ROUGHNESS * 8.0).rgb * ref_amount * EXPOSURE;
	ALBEDO *= 1.0 - ref_amount;
	// Force transparency on the material (required for refraction).
	ALPHA = 1.0;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_86j4t"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_8svjd"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_86j4t")

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_3g1qk"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_86j4t")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_d1580"]
render_priority = 0
shader = SubResource("Shader_6yc6o")
shader_parameter/albedo = Color(0.0470588, 0.317647, 0.466667, 0.54902)
shader_parameter/albedo_texture_size = Vector2i(0, 0)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.0
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/texture_refraction = SubResource("NoiseTexture2D_3g1qk")
shader_parameter/refraction = 0.05
shader_parameter/refraction_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/texture_normal = SubResource("NoiseTexture2D_8svjd")
shader_parameter/normal_scale = 1.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.04, 0.04, 0.04)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[sub_resource type="BoxMesh" id="BoxMesh_6yc6o"]
material = SubResource("ShaderMaterial_d1580")

[sub_resource type="BoxMesh" id="BoxMesh_8svjd"]

[sub_resource type="BoxShape3D" id="BoxShape3D_3g1qk"]

[sub_resource type="BoxShape3D" id="BoxShape3D_d1580"]
size = Vector3(134.003, 3.97681, 16.2129)

[node name="Map" type="Node3D"]

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_lymsy")

[node name="Terrain" type="Node3D" parent="."]

[node name="DreamPool" parent="Terrain" instance=ExtResource("1_ro55w")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.166332, 1.89322, 0.8774)

[node name="DreamPoolFloor" parent="Terrain" instance=ExtResource("2_3g1qk")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.194958, 3.96144, 0.78249)

[node name="Doors" parent="Terrain" instance=ExtResource("3_d1580")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.180382, 1.88174, 0.854114)

[node name="water" type="MeshInstance3D" parent="Terrain"]
transform = Transform3D(132.715, 0, 0, 0, 13.8818, 0, 0, 0, 16.9876, 0.751309, -3.53603, 0.657615)
mesh = SubResource("BoxMesh_6yc6o")
skeleton = NodePath("../..")

[node name="Props" type="Node3D" parent="."]

[node name="Smiley" parent="Props" instance=ExtResource("2_njngi")]
transform = Transform3D(0.811858, 0, 0, 0, 0.811858, 0, 0, 0, 0.811858, -7.96379, 2.03297, -1.28029)

[node name="DuckBuoy" parent="Props" instance=ExtResource("3_6yc6o")]
transform = Transform3D(1.25503, 0, 1.42265, 0, 1.89711, 0, -1.42265, 0, 1.25503, -19.8151, 3.74752, 3.91033)

[node name="Smiley" type="RigidBody3D" parent="."]
script = ExtResource("4_86j4t")

[node name="MeshInstance3D" type="MeshInstance3D" parent="Smiley"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 3.52089, 0)
mesh = SubResource("BoxMesh_8svjd")

[node name="CollisionShape3D" type="CollisionShape3D" parent="Smiley"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 3.5275, 0)
shape = SubResource("BoxShape3D_3g1qk")

[node name="ProtoController" parent="." instance=ExtResource("5_8svjd")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 58.1592, 2.72121, 1.14739)

[node name="Collision" type="Node3D" parent="."]

[node name="StaticBody3D" type="StaticBody3D" parent="Collision"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Collision/StaticBody3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 2.67281, 1.63503, 0.916475)
shape = SubResource("BoxShape3D_d1580")

[node name="CollisionShape3D2" type="CollisionShape3D" parent="Collision/StaticBody3D"]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, -0.82884, 7.1737, 10.7648)
shape = SubResource("BoxShape3D_d1580")

[node name="CollisionShape3D3" type="CollisionShape3D" parent="Collision/StaticBody3D"]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, -0.82884, 7.1737, -8.76804)
shape = SubResource("BoxShape3D_d1580")

[node name="Lights" type="Node3D" parent="."]

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="Lights"]
transform = Transform3D(-0.998342, -0.057564, -2.5162e-09, 0, -4.37114e-08, 1, -0.057564, 0.998342, 4.36389e-08, -40.4253, 48.4597, 0)
shadow_enabled = true

[node name="SpotLight3D3" type="SpotLight3D" parent="Lights"]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 37.2313, 33.5752, 0)
light_energy = 16.0
spot_range = 36.3787

[node name="SpotLight3D4" type="SpotLight3D" parent="Lights"]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, -33.716, 33.5752, 0)
light_energy = 16.0
spot_range = 36.3787
